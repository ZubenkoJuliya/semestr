import telebot
from logger import Logger
from api import GoogleBooksAPI, OpenLibraryAPI
from scraper import BookScraper
import requests
import random

API_TOKEN = '7812297707:AAG7kKywnWPqN4aeVGc7aCw3TR7rc2HOags'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –ª–æ–≥–≥–µ—Ä–∞
bot = telebot.TeleBot(API_TOKEN)
logger = Logger()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
google_books_api = GoogleBooksAPI()
open_library_api = OpenLibraryAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
book_scraper = BookScraper()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ start
@bot.message_handler(commands=['start'])
def cmd_start(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(telebot.types.KeyboardButton("üìñ –°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞"),
                 telebot.types.KeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä"),
                 telebot.types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ —Å–ª–æ–≤—É"),
                 telebot.types.KeyboardButton("üë®‚Äçüìö –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –∞–≤—Ç–æ—Ä—É"),
                 telebot.types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø BookBot. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    log_and_send(message.chat.id, welcome_text, message.from_user.username, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏
@bot.message_handler(func=lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
def cmd_help(message):
    help_text = (
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥–∏! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "1. üìñ –°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞ - –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–µ.\n"
        "2. üìö –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä - –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏.\n"
        "3. üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ —Å–ª–æ–≤—É - –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.\n"
        "4. üë®‚Äçüìö –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –∞–≤—Ç–æ—Ä—É - –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥.\n"
    )
    log_and_send(message.chat.id, help_text, message.from_user.username)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
@bot.message_handler(func=lambda message: message.text == "üìö –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä")
def cmd_select_genre(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    genres = {
        "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": "http://books.toscrape.com/catalogue/category/books/science-fiction_16/index.html",
        "–†–æ–º–∞–Ω": "http://books.toscrape.com/catalogue/category/books/romance_8/index.html",
        "–î–µ—Ç–µ–∫—Ç–∏–≤": "http://books.toscrape.com/catalogue/category/books/mystery_3/index.html",
        "–§—ç–Ω—Ç–µ–∑–∏": "http://books.toscrape.com/catalogue/category/books/fantasy_19/index.html"
    }

    for genre, url in genres.items():
        keyboard.add(telebot.types.InlineKeyboardButton(genre, url=url))

    log_and_send(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", message.from_user.username, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏ –ø–æ —Å–ª–æ–≤—É
@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ —Å–ª–æ–≤—É")
def cmd_search_by_word(message):
    log_and_send(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:", message.from_user.username)
    bot.register_next_step_handler(message, search_book_by_word)

def search_book_by_word(message):
    title_word = message.text
    log_and_send(message.chat.id, f"–í—ã –∏—Å–∫–∞–ª–∏: {title_word}", "BOT")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    result = google_books_api.search_by_title(title_word)
    log_and_send(message.chat.id, result, "BOT")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏ –ø–æ –∞–≤—Ç–æ—Ä—É
@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüìö –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –∞–≤—Ç–æ—Ä—É")
def cmd_search_by_author(message):
    log_and_send(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:", message.from_user.username)
    bot.register_next_step_handler(message, search_book_by_author)

def search_book_by_author(message):
    author = message.text
    log_and_send(message.chat.id, f"–í—ã –∏—Å–∫–∞–ª–∏ –∫–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä–∞: {author}", "BOT")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    result = open_library_api.search_by_author(author)
    log_and_send(message.chat.id, result, "BOT")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–∏
@bot.message_handler(func=lambda message: message.text == "üìñ –°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞")
def cmd_random_book(message):
    try:
        random_seed = str(random.randint(1, 100000))
        search_url = f"https://openlibrary.org/search.json?q={random_seed}&limit=1"
        search_response = requests.get(search_url)
        search_response.raise_for_status()

        search_data = search_response.json()
        if not search_data.get("docs"):
            log_and_send(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—É—é –∫–Ω–∏–≥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", "BOT")
            return

        book_data = search_data["docs"][0]
        work_id = book_data.get("key")
        if work_id:
            book_url = f"https://openlibrary.org{work_id}.json"
            book_response = requests.get(book_url)
            book_response.raise_for_status()
            full_data = book_response.json()
        else:
            full_data = book_data

        title = full_data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        authors = ", ".join(book_data.get("author_name", ["–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"]))
        year = book_data.get("first_publish_year", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        isbn = ", ".join(book_data.get("isbn", ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"]))[:50]

        cover_id = book_data.get("cover_i")
        cover_url = f"https://covers.openlibrary.org/b/id/{cover_id}-M.jpg" if cover_id else None

        reply_text = (
            f"üìö –°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"–ê–≤—Ç–æ—Ä: {authors}\n"
            f"–ì–æ–¥: {year}\n"
        )

        if cover_url:
            bot.send_photo(message.chat.id, cover_url, caption=reply_text)
        else:
            log_and_send(message.chat.id, reply_text, "BOT")

    except requests.exceptions.HTTPError as http_err:
        log_and_send(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å OpenLibrary.", "BOT")
        print(f"HTTP error: {http_err}")
    except Exception as e:
        log_and_send(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.", "BOT")
        print(f"Error: {e}")

def log_and_send(chat_id, text, username=None, **kwargs):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param chat_id: ID —á–∞—Ç–∞
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
    :param kwargs: –î–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è send_message
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.log_message(
            user_id=chat_id,
            username=username or "BOT",
            message=text,
            is_bot=(username == "BOT")
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)

